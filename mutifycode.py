# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Mert\Desktop\mutify\mutify.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog

from PyQt5.QtGui import QIcon
import glob
import cv2
import os
import numpy as np
from matplotlib import pyplot as plt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(331, 426)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons\\icon.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.imageLabel = QtWidgets.QLabel(self.centralwidget)
        self.imageLabel.setGeometry(QtCore.QRect(30, 20, 271, 181))
        self.imageLabel.setText("")
        self.imageLabel.setPixmap(QtGui.QPixmap("icons\\icon2.png"))
        self.imageLabel.setScaledContents(True)
        self.imageLabel.setObjectName("imageLabel")
        self.browseButton = QtWidgets.QToolButton(self.centralwidget)
        self.browseButton.setGeometry(QtCore.QRect(280, 210, 21, 21))
        self.browseButton.setObjectName("browseButton")
        self.sourcePath = QtWidgets.QTextEdit(self.centralwidget)
        self.sourcePath.setEnabled(True)
        self.sourcePath.setGeometry(QtCore.QRect(120, 210, 151, 21))
        self.sourcePath.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.sourcePath.setAcceptDrops(True)
        self.sourcePath.setAutoFillBackground(False)
        self.sourcePath.setObjectName("sourcePath")
        self.foundLcd = QtWidgets.QLCDNumber(self.centralwidget)
        self.foundLcd.setGeometry(QtCore.QRect(240, 310, 61, 31))
        self.foundLcd.setStyleSheet("")
        self.foundLcd.setObjectName("foundLcd")
        self.deleteBox = QtWidgets.QCheckBox(self.centralwidget)
        self.deleteBox.setEnabled(True)
        self.deleteBox.setGeometry(QtCore.QRect(30, 280, 16, 21))
        self.deleteBox.setText("")
        self.deleteBox.setDisabled(True)
        self.deleteBox.setObjectName("deleteBox")
        self.blurBox = QtWidgets.QCheckBox(self.centralwidget)
        self.blurBox.setGeometry(QtCore.QRect(100, 280, 16, 21))
        self.blurBox.setText("")
        self.blurBox.setDisabled(True)
        self.blurBox.setObjectName("blurBox")
        self.blurLevel = QtWidgets.QSpinBox(self.centralwidget)
        self.blurLevel.setGeometry(QtCore.QRect(271, 280, 31, 22))
        self.blurLevel.setObjectName("blurLevel")
        self.blurLevel.setMaximum(3)
        self.blurLevel.setMinimum(1)
        self.blurLabel = QtWidgets.QLabel(self.centralwidget)
        self.blurLabel.setGeometry(QtCore.QRect(237, 280, 31, 21))
        self.blurLabel.setObjectName("blurLabel")
        self.foundLabel = QtWidgets.QLabel(self.centralwidget)
        self.foundLabel.setGeometry(QtCore.QRect(200, 310, 31, 31))
        self.foundLabel.setObjectName("foundLabel")
        self.mutifyButton = QtWidgets.QPushButton(self.centralwidget)
        self.mutifyButton.setGeometry(QtCore.QRect(30, 310, 141, 31))
        self.mutifyButton.setObjectName("mutifyButton")
        self.destinationPath = QtWidgets.QTextEdit(self.centralwidget)
        self.destinationPath.setEnabled(True)
        self.destinationPath.setGeometry(QtCore.QRect(120, 240, 151, 21))
        self.destinationPath.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.destinationPath.setAcceptDrops(True)
        self.destinationPath.setAutoFillBackground(False)
        self.destinationPath.setObjectName("destinationPath")
        self.browseButton_2 = QtWidgets.QToolButton(self.centralwidget)
        self.browseButton_2.setGeometry(QtCore.QRect(280, 240, 21, 21))
        self.browseButton_2.setObjectName("browseButton_2")
        self.sourceLabel = QtWidgets.QLabel(self.centralwidget)
        self.sourceLabel.setGeometry(QtCore.QRect(30, 210, 81, 21))
        self.sourceLabel.setObjectName("sourceLabel")
        self.destinationLabel = QtWidgets.QLabel(self.centralwidget)
        self.destinationLabel.setGeometry(QtCore.QRect(30, 240, 81, 21))
        self.destinationLabel.setObjectName("destinationLabel")
        self.deleteButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleteButton.setGeometry(QtCore.QRect(50, 282, 41, 21))
        self.deleteButton.setObjectName("deleteButton")
        self.blurButton = QtWidgets.QPushButton(self.centralwidget)
        self.blurButton.setGeometry(QtCore.QRect(120, 280, 41, 21))
        self.blurButton.setObjectName("blurButton")
        self.fuzzyBox = QtWidgets.QCheckBox(self.centralwidget)
        self.fuzzyBox.setGeometry(QtCore.QRect(170, 280, 16, 21))
        self.fuzzyBox.setText("")
        self.fuzzyBox.setDisabled(True)
        self.fuzzyBox.setObjectName("fuzzyBox")
        self.fuzzButton = QtWidgets.QPushButton(self.centralwidget)
        self.fuzzButton.setGeometry(QtCore.QRect(190, 280, 41, 21))
        self.fuzzButton.setObjectName("fuzzButton")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(30, 350, 271, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 331, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Mutify"))
        self.browseButton.setText(_translate("MainWindow", "..."))
        self.blurLabel.setText(_translate("MainWindow", "Blur lv"))
        self.foundLabel.setText(_translate("MainWindow", "Found"))
        self.mutifyButton.setText(_translate("MainWindow", "MUTIFY!"))
        self.browseButton_2.setText(_translate("MainWindow", "..."))
        self.sourceLabel.setText(_translate("MainWindow", "Source Path"))
        self.destinationLabel.setText(_translate("MainWindow", "Destination Path"))
        self.deleteButton.setText(_translate("MainWindow", "Delete"))
        self.blurButton.setText(_translate("MainWindow", "Blur"))
        self.fuzzButton.setText(_translate("MainWindow", "Fuzzy"))
        self.browseButton.clicked.connect(self.browseButton_handler)
        self.browseButton_2.clicked.connect(self.browseButton_2_handler)
        self.mutifyButton.clicked.connect(self.mutifyButton_handler)
        self.blurButton.clicked.connect(self.blurButton_handler)
        self.deleteButton.clicked.connect(self.deleteButton_handler)
        self.fuzzButton.clicked.connect(self.fuzzButton_handler)
        self.progressBar.setValue(0)
        self.blurLevel.setDisabled(True)
        palette = self.foundLcd.palette()
        palette.setColor(palette.WindowText, QtGui.QColor(85, 85, 255))
        # background color
        palette.setColor(palette.Background, QtGui.QColor(0, 170, 255))
        # "light" border
        palette.setColor(palette.Light, QtGui.QColor(255, 0, 0))
        # "dark" border
        palette.setColor(palette.Dark, QtGui.QColor(255, 0, 0))

        self.imageLabel.setStyleSheet("border: 3px solid gray;") 

        # set the palette
        self.foundLcd.setPalette(palette)
        self.foundLcd.update()
        self.foundLcd.repaint()

    def mutifyButton_handler(self):
        path_s = self.sourcePath.toPlainText()
        path_d = self.destinationPath.toPlainText()
        path_s.replace("\\","/")
        path_d.replace("\\","/")
        self.mutify(path_s,path_d,self.blurLevel.value())
    
    def blurButton_handler(self):
        self.blurBox.setChecked(True)
        self.deleteBox.setChecked(False)
        self.fuzzyBox.setChecked(False)
        self.blurLevel.setEnabled(True)

    def deleteButton_handler(self):
        self.blurBox.setChecked(False)
        self.deleteBox.setChecked(True)
        self.fuzzyBox.setChecked(False)
        self.blurLevel.setEnabled(False)

    def fuzzButton_handler(self):
        self.blurBox.setChecked(False)
        self.deleteBox.setChecked(False)
        self.fuzzyBox.setChecked(True)
        self.blurLevel.setEnabled(False)            

    def browseButton_handler(self):
        self.open_dialog_box_s()       
    def browseButton_2_handler(self):
        self.open_dialog_box_d()
    def open_dialog_box_s(self):
        filePath = QFileDialog.getOpenFileName(None,"Select Source File", "","JPEG Files (*.jpg)")
        path = filePath[0]
        self.sourcePath.setText(path)
        self.show_image()
    def open_dialog_box_d(self):
        filePath = QFileDialog.getExistingDirectory()
        self.destinationPath.setText(filePath)
    def show_image(self):
        self.imageLabel.setPixmap(QtGui.QPixmap(self.sourcePath.toPlainText()))

    
    def mutify(self,path,path2,blurlevel1):
        filecount = next(os.walk(path2))[2]
        self.progressBar.setMaximum(len(filecount)) 
        found = 0
        source_img = cv2.imread(path)
        grayS_img = cv2.cvtColor(source_img, cv2.COLOR_BGR2GRAY)

        loopcount = 0
        if self.blurBox.isChecked():
            for subdir, dirs, files in os.walk(path2):
                for img in files:
                    loopcount += 1
                    self.progressBar.setValue(loopcount)
                    if img.endswith('.jpg') or img.endswith('.jpeg'):
                        target_img = cv2.imread(os.path.join(subdir, img),0)
                        if (source_img.shape[0] <= target_img.shape[0] and source_img.shape[1] <= target_img.shape[1]) or (source_img.shape[0] > target_img.shape[0] and source_img.shape[1] > target_img.shape[1]):
                            match = cv2.matchTemplate(grayS_img, target_img, cv2.TM_CCOEFF_NORMED)
                            threshold = 0.7
                            flag = False
                            if np.amax(match) > threshold:
                                flag = True
                            elif flag == False:
                                rotated = cv2.rotate(target_img, cv2.ROTATE_180)
                                match = cv2.matchTemplate(grayS_img, rotated, cv2.TM_CCOEFF_NORMED)
                                if np.amax(match) > threshold:
                                    flag = True

                            if flag:
                                blurlevel = blurlevel1 * 15
                                found = found+1
                                if self.blurBox.isChecked():
                                    blur = cv2.imread(os.path.join(subdir, img)) 
                                    blur = cv2.GaussianBlur(blur, (blurlevel,blurlevel),0)
                                    cv2.imwrite(os.path.join(subdir, img), blur)
                                    self.foundLcd.display(found)
                                    self.foundLcd.update()
                                    self.foundLcd.repaint()
                                    self.progressBar.update()
                                    self.progressBar.repaint()
                        elif (source_img.shape[0] > target_img.shape[0] and source_img.shape[1] < target_img.shape[1]) or (source_img.shape[0] < target_img.shape[0] and source_img.shape[1] > target_img.shape[1]):
                            rotated = cv2.rotate(target_img, cv2.ROTATE_90_CLOCKWISE)
                            if (source_img.shape[0] <= rotated.shape[0] and source_img.shape[1] <= rotated.shape[1]) or (source_img.shape[0] > rotated.shape[0] and source_img.shape[1] > rotated.shape[1]):
                                match = cv2.matchTemplate(grayS_img, rotated, cv2.TM_CCOEFF_NORMED)
                                threshold = 0.7
                                flag = False
                                if np.amax(match) > threshold:
                                    flag = True
                                elif flag == False:
                                    rotated2 = cv2.rotate(target_img, cv2.ROTATE_90_COUNTERCLOCKWISE)
                                    match = cv2.matchTemplate(grayS_img, rotated2, cv2.TM_CCOEFF_NORMED)
                                    if np.amax(match) > threshold:
                                        flag = True

                                if flag:
                                    blurlevel = blurlevel1 * 15
                                    found = found+1
                                    if self.blurBox.isChecked():
                                        blur = cv2.imread(os.path.join(subdir, img)) 
                                        blur = cv2.GaussianBlur(blur, (blurlevel,blurlevel),0)
                                        cv2.imwrite(os.path.join(subdir, img), blur)
                                        self.foundLcd.display(found)
                                        self.foundLcd.update()
                                        self.foundLcd.repaint()
                                        self.progressBar.update()
                                        self.progressBar.repaint()

        elif self.deleteBox.isChecked():
            for subdir, dirs, files in os.walk(path2):
                for img in files:
                    loopcount += 1
                    self.progressBar.setValue(loopcount)
                    if img.endswith('.jpg') or img.endswith('.jpeg'):
                        target_img = cv2.imread(os.path.join(subdir, img),0)
                        if (source_img.shape[0] <= target_img.shape[0] and source_img.shape[1] <= target_img.shape[1]) or (source_img.shape[0] > target_img.shape[0] and source_img.shape[1] > target_img.shape[1]): 

                            match = cv2.matchTemplate(grayS_img, target_img, cv2.TM_CCOEFF_NORMED)
                            threshold = 0.7
                            flag = False
                            if np.amax(match) > threshold:
                                flag = True
                            elif flag == False:
                                rotated = cv2.rotate(target_img, cv2.ROTATE_180)
                                match = cv2.matchTemplate(grayS_img, rotated, cv2.TM_CCOEFF_NORMED)
                                if np.amax(match) > threshold:
                                    flag = True
                            if flag:
                                found = found+1
                                if self.deleteBox.isChecked():
                                    os.remove(os.path.join(subdir, img))
                                    self.foundLcd.display(found)
                                    self.foundLcd.update()
                                    self.foundLcd.repaint()
                                    self.progressBar.update()
                                    self.progressBar.repaint()

                        elif (source_img.shape[0] > target_img.shape[0] and source_img.shape[1] < target_img.shape[1]) or (source_img.shape[0] < target_img.shape[0] and source_img.shape[1] > target_img.shape[1]):
                            rotated = cv2.rotate(target_img, cv2.ROTATE_90_CLOCKWISE)
                            if (source_img.shape[0] <= rotated.shape[0] and source_img.shape[1] <= rotated.shape[1]) or (source_img.shape[0] > rotated.shape[0] and source_img.shape[1] > rotated.shape[1]):
                                match = cv2.matchTemplate(grayS_img, rotated, cv2.TM_CCOEFF_NORMED)
                                threshold = 0.7
                                flag = False
                                if np.amax(match) > threshold:
                                    flag = True
                                elif flag == False:
                                    rotated2 = cv2.rotate(target_img, cv2.ROTATE_90_COUNTERCLOCKWISE)
                                    match = cv2.matchTemplate(grayS_img, rotated2, cv2.TM_CCOEFF_NORMED)
                                    if np.amax(match) > threshold:
                                        flag = True
                                if flag:
                                    found = found+1
                                    if self.deleteBox.isChecked():
                                        os.remove(os.path.join(subdir, img))
                                        self.foundLcd.display(found)
                                        self.foundLcd.update()
                                        self.foundLcd.repaint()
                                        self.progressBar.update()
                                        self.progressBar.repaint()
        elif self.fuzzyBox.isChecked():
            for subdir, dirs, files in os.walk(path2):
                for img in files:                    
                    loopcount += 1
                    self.progressBar.setValue(loopcount)
                    if img.endswith('.jpg') or img.endswith('.jpeg'):
                        org_img = cv2.imread(os.path.join(subdir, img))
                        height= org_img.shape[0]
                        width = org_img.shape[1]
                        px, py = (int(round(height/20)),int(round(width/20)))
                        target_img = cv2.imread(os.path.join(subdir, img),0)
                        if (source_img.shape[0] <= target_img.shape[0] and source_img.shape[1] <= target_img.shape[1]) or (source_img.shape[0] > target_img.shape[0] and source_img.shape[1] > target_img.shape[1]): 

                            match = cv2.matchTemplate(grayS_img, target_img, cv2.TM_CCOEFF_NORMED)
                            threshold = 0.7
                            flag = False
                            if np.amax(match) > threshold:
                                flag = True
                            elif flag == False:
                                rotated = cv2.rotate(target_img, cv2.ROTATE_180)
                                match = cv2.matchTemplate(grayS_img, rotated, cv2.TM_CCOEFF_NORMED)
                                if np.amax(match) > threshold:
                                    flag = True
                            if flag:
                                found = found+1
                                if self.fuzzyBox.isChecked():
                                    resized = cv2.resize(org_img,(py,px), interpolation=cv2.INTER_LINEAR)
                                    pixelated = cv2.resize(resized,(width,height),interpolation=cv2.INTER_NEAREST)
                                    cv2.imwrite(os.path.join(subdir, img),pixelated)
                                    self.foundLcd.display(found)
                                    self.foundLcd.update()
                                    self.foundLcd.repaint()
                                    self.progressBar.update()
                                    self.progressBar.repaint()
                        elif (source_img.shape[0] > target_img.shape[0] and source_img.shape[1] < target_img.shape[1]) or (source_img.shape[0] < target_img.shape[0] and source_img.shape[1] > target_img.shape[1]):
                            rotated = cv2.rotate(target_img, cv2.ROTATE_90_CLOCKWISE)
                            if (source_img.shape[0] <= rotated.shape[0] and source_img.shape[1] <= rotated.shape[1]) or (source_img.shape[0] > rotated.shape[0] and source_img.shape[1] > rotated.shape[1]):
                                match = cv2.matchTemplate(grayS_img, rotated, cv2.TM_CCOEFF_NORMED)
                                threshold = 0.7
                                flag = False
                                if np.amax(match) > threshold:
                                    flag = True
                                elif flag == False:
                                    rotated2 = cv2.rotate(target_img, cv2.ROTATE_90_COUNTERCLOCKWISE)
                                    match = cv2.matchTemplate(grayS_img, rotated2, cv2.TM_CCOEFF_NORMED)
                                    if np.amax(match) > threshold:
                                        flag = True
                                if flag:
                                    found = found+1
                                    if self.fuzzyBox.isChecked():
                                        resized = cv2.resize(org_img,(py,px), interpolation=cv2.INTER_LINEAR)
                                        pixelated = cv2.resize(resized,(width,height),interpolation=cv2.INTER_NEAREST)
                                        cv2.imwrite(os.path.join(subdir, img),pixelated)
                                        self.foundLcd.display(found)
                                        self.foundLcd.update()
                                        self.foundLcd.repaint()
                                        self.progressBar.update()
                                        self.progressBar.repaint()                    
    
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
